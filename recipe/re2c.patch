diff --git a/cmake/FindRE2C.cmake b/cmake/FindRE2C.cmake
index d74ea84c..01c42c08 100644
--- a/cmake/FindRE2C.cmake
+++ b/cmake/FindRE2C.cmake
@@ -12,10 +12,10 @@
 #   - RE2C_PATCH_VERSION : patch version of re2c
 #
 # The following macro is provided:
-#   RE2C_TARGET
+#   re2c_target
 #
 #  Prototype:
-#   RE2C_TARGET([NAME <target>] [INPUT <input>] [OUTPUT <output>] [OPTIONS <options>] [DEPENDS <list of files>])
+#   re2c_target([NAME <target>] [INPUT <input>] [OUTPUT <output>] [OPTIONS <options>] [DEPENDS <list of files>])
 #
 # Argument details:
 #   - NAME <target> (mandatory):               cmake target name to build the lexer
@@ -36,7 +36,7 @@
 #
 #   find_package(RE2C REQUIRED) # Note: name is case sensitive
 #
-#   RE2C_TARGET(NAME foo INPUT foo.re2c OUPUT foo.c OPTIONS "-b" DEPENDS foo.h)
+#   re2c_target(NAME foo INPUT foo.re2c OUPUT foo.c OPTIONS "-b" DEPENDS foo.h)
 #
 #   add_executable(foo foo.c)
 #
@@ -58,33 +58,51 @@ find_program(RE2C_EXECUTABLE NAMES re2c DOC "path to the re2c executable")
 mark_as_advanced(RE2C_EXECUTABLE)
 
 if(RE2C_EXECUTABLE)
-    execute_process(COMMAND "${RE2C_EXECUTABLE}" --vernum OUTPUT_VARIABLE RE2C_RAW_VERSION OUTPUT_STRIP_TRAILING_WHITESPACE)
-    math(EXPR RE2C_MAJOR_VERSION "${RE2C_RAW_VERSION} / 100000")
-    math(EXPR RE2C_MINOR_VERSION "(${RE2C_RAW_VERSION} - ${RE2C_MAJOR_VERSION} * 100000) / 100")
-    math(EXPR RE2C_PATCH_VERSION "${RE2C_RAW_VERSION} - ${RE2C_MAJOR_VERSION} * 100000 - ${RE2C_MINOR_VERSION} * 100")
-    set(RE2C_VERSION "${RE2C_MAJOR_VERSION}.${RE2C_MINOR_VERSION}.${RE2C_PATCH_VERSION}")
+    execute_process(
+        COMMAND "${RE2C_EXECUTABLE}" --vernum
+        OUTPUT_VARIABLE RE2C_RAW_VERSION
+        OUTPUT_STRIP_TRAILING_WHITESPACE
+        RESULT_VARIABLE RE2C_RESULT
+    )
+    if(RE2C_RESULT EQUAL 0 AND RE2C_RAW_VERSION MATCHES "^[0-9]+")
+        math(EXPR RE2C_MAJOR_VERSION "(${RE2C_RAW_VERSION} / 10000) % 100")
+        math(EXPR RE2C_MINOR_VERSION "(${RE2C_RAW_VERSION} /   100) % 100")
+        math(EXPR RE2C_PATCH_VERSION "(${RE2C_RAW_VERSION} /     1) % 100")
+        set(RE2C_VERSION "${RE2C_MAJOR_VERSION}.${RE2C_MINOR_VERSION}.${RE2C_PATCH_VERSION}")
 
-    macro(RE2C_TARGET)
-        cmake_parse_arguments(PARSED_ARGS "" "NAME;INPUT;OUTPUT;OPTIONS" "DEPENDS" ${ARGN})
+        macro(re2c_target)
+            cmake_parse_arguments(PARSED_ARGS "" "NAME;INPUT;OUTPUT;HEADER;OPTIONS" "DEPENDS" ${ARGN})
 
-        if(NOT PARSED_ARGS_OUTPUT)
-            message(FATAL_ERROR "RE2C_TARGET expect an output filename")
-        endif(NOT PARSED_ARGS_OUTPUT)
-        if(NOT PARSED_ARGS_INPUT)
-            message(FATAL_ERROR "RE2C_TARGET expect an input filename")
-        endif(NOT PARSED_ARGS_INPUT)
-        if(NOT PARSED_ARGS_NAME)
-            message(FATAL_ERROR "RE2C_TARGET expect a target name")
-        endif(NOT PARSED_ARGS_NAME)
+            if(NOT PARSED_ARGS_OUTPUT)
+                message(FATAL_ERROR "re2c_target expect an output filename")
+            endif()
+            if(NOT PARSED_ARGS_INPUT)
+                message(FATAL_ERROR "re2c_target expect an input filename")
+            endif()
+            if(NOT PARSED_ARGS_NAME)
+                message(FATAL_ERROR "re2c_target expect a target name")
+            endif()
+            set(OUTPUTS "${PARSED_ARGS_OUTPUT}")
+            if(PARSED_ARGS_HEADER)
+                list(APPEND PARSED_ARGS_OPTIONS "--header")
+                list(APPEND PARSED_ARGS_OPTIONS "${PARSED_ARGS_HEADER}")
+                list(APPEND OUTPUTS "${PARSED_ARGS_HEADER}")
+                set(RE2C_${PARSED_ARGS_NAME}_HEADER "${PARSED_ARGS_HEADER}")
+            endif()
 
-        add_custom_command(
-            OUTPUT ${PARSED_ARGS_OUTPUT}
-            COMMAND ${RE2C_EXECUTABLE} ${PARSED_ARGS_OPTIONS} -o ${PARSED_ARGS_OUTPUT} ${PARSED_ARGS_INPUT}
-            DEPENDS ${PARSED_ARGS_INPUT} ${PARSED_ARGS_DEPENDS}
-            COMMENT "[RE2C][${PARSED_ARGS_NAME}] Building lexer with re2c ${RE2C_VERSION}"
-        )
-        set(RE2C_${PARSED_ARGS_NAME}_OUTPUT "${PARSED_ARGS_OUTPUT}")
-    endmacro(RE2C_TARGET)
+
+            cmake_path(RELATIVE_PATH PARSED_ARGS_OUTPUT BASE_DIRECTORY ${CMAKE_BINARY_DIR} OUTPUT_VARIABLE OUTPUT_NAME)
+            add_custom_command(
+                OUTPUT ${OUTPUTS}
+                COMMAND ${RE2C_EXECUTABLE} ${PARSED_ARGS_OPTIONS} -o ${PARSED_ARGS_OUTPUT} ${PARSED_ARGS_INPUT}
+                DEPENDS ${PARSED_ARGS_INPUT} ${PARSED_ARGS_DEPENDS}
+                COMMENT "Generating re2c lexer ${OUTPUT_NAME}"
+            )
+            set(RE2C_${PARSED_ARGS_NAME}_OUTPUT "${PARSED_ARGS_OUTPUT}")
+        endmacro()
+    else()
+        message(WARNING "Could not determine re2c version (output: ${RE2C_RAW_VERSION})")
+    endif()
 endif()
 
 find_package_handle_standard_args(RE2C REQUIRED_VARS RE2C_EXECUTABLE VERSION_VAR RE2C_VERSION)
